#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

'''
    PyKI - PKI openssl for managing TLS certificates
    Copyright (C) 2016 MAIBACH ALAIN

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Contact: alain.maibach@gmail.com / 34 rue appienne 13480 - FRANCE.
'''
import random
import string
import argparse

from sys import argv
import os
from PyKI import PyKInit


def argCommandline(argv):
    """
    Manage cli script args
    """
    parser = argparse.ArgumentParser(
        description='Generate Certificate Signing Request')
    parser.add_argument(
        "-n",
        "--cn",
        action="store",
        dest="cn",
        type=str,
        help=u"Certificate common name",
        metavar='Common Name',
        required=True)
    parser.add_argument(
        "-s",
        "--passphrase",
        action='store',
        dest="passwd",
        type=str,
        default=False,
        help=u"Private key passphrase",
        metavar='mypassphrase',
        required=False)
    parser.add_argument(
        "-c",
        "--country",
        action='store',
        dest="c",
        type=str,
        default='',
        help=u"Country Name (2 letter code) eg. US",
        metavar='XX',
        required=False)
    parser.add_argument(
        "-st",
        "--state",
        action='store',
        dest="st",
        type=str,
        default='',
        help=u"State or Province Name (full name)",
        metavar='state',
        required=False)
    parser.add_argument(
        "-l",
        "--city",
        action='store',
        dest="l",
        type=str,
        default='',
        help=u"Locality Name (eg, city)",
        metavar='city',
        required=False)
    parser.add_argument(
        "-o",
        "--organization",
        action='store',
        type=str,
        dest="o",
        default='',
        help=u"Organization Name (eg, company)",
        metavar='Organization',
        required=False)
    parser.add_argument(
        "-ou",
        "--org-unit",
        action='store',
        dest="ou",
        type=str,
        default='',
        help=u"Organizational Unit Name (eg, section)",
        metavar='org unit',
        required=False)
    parser.add_argument(
        "-e",
        "--email",
        action='store',
        dest="email",
        type=str,
        default='',
        help=u"Email Address",
        metavar='nobody@domain.com',
        required=False)
    parser.add_argument(
        "-a",
        "--altnames",
        action='store',
        dest="subjectAltName",
        nargs='*',
        type=str,
        metavar='type:value',
        default=False,
        help=u"X509 extension Subject Alternative-names (eg, IP:1.2.3.4 DNS:www.toto.net URI: www.toto.net)",
        required=False)
    parser.add_argument(
        "-v",
        "--verbose",
        action='store_true',
        dest='mainVerbosity',
        help=u"Add output verbosity",
        required=False)
    parser.add_argument(
        "-t",
        "--key-size",
        action='store',
        dest="size",
        type=int,
        default=False,
        help=u"Private key size int value",
        metavar='XXXX',
        choices=[
            1024,
            2048,
            4096,
            8192],
        required=False)

    args = parser.parse_args()
    if len(argv) <= 1:
        parser.print_help()
        exit(1)

    result = vars(args)
    return(result)


def codegenerator(pwlen=25, alphabet=False):
    if not alphabet:
        #alphabet = string.printable
        alphabet = string.digits + string.ascii_letters + string.punctuation

    pw_length = pwlen
    mypw = ""

    for i in range(pw_length):
        next_index = random.randrange(len(alphabet))
        mypw = mypw + alphabet[next_index]
    return(mypw)

if __name__ == '__main__':
    args = argCommandline(argv)

    configFilePath = '/etc/pyki-config.ini'

    pyki = PyKInit.PyKIsetup(configFilePath)
    pki = pyki.pki
    if not pki:
        print("ERROR: Errors found during init")
        exit(1)
    pki.set_verbosity(args['mainVerbosity'])

    if args['cn'] in pki.nameList:
        print('ERROR: Certificate ' + args['cn'] + " already exists.")
        exit(1)

    if args['subjectAltName'] and not 'DNS:' + \
            args['cn'] in args['subjectAltName']:
        args['subjectAltName'].insert(0, 'DNS:' + args['cn'])

    if not args['passwd']:
        args['passwd'] = codegenerator(pwlen=26)

    print("INFO: Generate a client csr with it's private key")
    # create csr with a private key size of 1024
    csr = pki.create_csr(
        country=args['c'], state=args['st'], city=args['l'],
        org=args['o'], ou=args['ou'],
        email=args['email'],
        passphrase=args['passwd'],
        cn=args['cn'],
        keysize=args['size'],
        subjectAltName=args['subjectAltName']
    )
    print(csr['message'])

    pki.remove_lockf("INFO: PKI unlocked.")
    del(pki)
    exit(0)
